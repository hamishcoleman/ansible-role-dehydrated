---
#
# This snippet is called from another role that wishes to register the
# intent to have a letsencrypt SSL certificate.  It sets everything up
# to use the certificate, before the dehydrated is installed, configured
# or has connected to the internet
#

- name: Create dirs
  ansible.builtin.file:
    state: directory
    path: "{{ dehydrated_item.path }}"
    mode: "{{ dehydrated_item.mode }}"
  loop:
    - path: /etc/dehydrated
      mode: "u=rwx,go=rx"
    - path: /var/lib/dehydrated/acme-challenges
      mode: "u=rwx,go=rx"
    - path: "/var/lib/dehydrated/certs/{{ param.hostname }}"
      mode: "u=rwx"
  loop_control:
    loop_var: dehydrated_item

- name: Add domain
  ansible.builtin.lineinfile:
    path: /etc/dehydrated/domains.txt
    create: true
    mode: "a=r"
    line: "{{ param.hostname }}"
  register: domain

- name: Dummy certs
  ansible.builtin.file:
    state: link
    path: "{{ dehydrated_item.path }}"
    src: "{{ dehydrated_item.src }}"
  when: domain.changed
  loop:
    - path: "/var/lib/dehydrated/certs/{{ param.hostname }}/cert.pem"
      src: /etc/ssl/certs/ssl-cert-snakeoil.pem
    - path: "/var/lib/dehydrated/certs/{{ param.hostname }}/chain.pem"
      src: /etc/ssl/certs/ssl-cert-snakeoil.pem
    - path: "/var/lib/dehydrated/certs/{{ param.hostname }}/fullchain.pem"
      src: /etc/ssl/certs/ssl-cert-snakeoil.pem
    - path: "/var/lib/dehydrated/certs/{{ param.hostname }}/privkey.pem"
      src: /etc/ssl/private/ssl-cert-snakeoil.key
  loop_control:
    loop_var: dehydrated_item

# FIXME:
# - create the dummy snakeoil certs only if no real certs exist (could stat
#   one and check if it is a symlink)

- name: Flag that we have snakeoil
  ansible.builtin.file:
    state: touch
    path: /var/lib/dehydrated/certs/snakeoil
    mode: "a=r"
  when: domain.changed

# - set a flag requesting a "dehydrated -c --force" run if dummy certs created
